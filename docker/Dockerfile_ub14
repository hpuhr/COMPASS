FROM ubuntu:14.04

RUN groupadd -r someusers --gid=1000 
RUN useradd -r -p "$(openssl passwd -1 sk)" -g someusers -G sudo --uid=1000 --create-home --shell /bin/bash sk 

# Update and allow for apt over HTTPS
RUN apt-get update && apt-get install -y apt-utils
RUN apt-get install software-properties-common build-essential -y
RUN add-apt-repository ppa:ubuntu-toolchain-r/test -y 
RUN add-apt-repository ppa:george-edison55/cmake-3.x
#RUN add-apt-repository ppa:mhier/libboost-latest
RUN apt-get update
RUN apt-get install gcc g++ cmake3 -y
#RUN apt-get install gcc-9 g++-9 cmake -y
#RUN sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9
#RUN update-alternatives --set gcc "/usr/bin/gcc-9"

RUN apt-get install wget -y

#install boost
RUN wget -O boost_1_73_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.73.0/boost_1_73_0.tar.gz/download --no-check-certificate
RUN tar xzvf boost_1_73_0.tar.gz
RUN cd boost_1_73_0/ && ./bootstrap.sh --prefix=/usr/
RUN cd boost_1_73_0/ && ./b2
RUN cd boost_1_73_0/ && ./b2 install

# install atsdb deps
#RUN apt-get install libboost-all-dev -y
RUN apt-get install liblog4cpp5-dev libssl-dev libarchive-dev libmysql++-dev libeigen3-dev libgdal-dev  -y #libmysqlclient-dev libsqlite3-dev
# tools
RUN apt-get install locate zip unzip qtchooser chrpath -y

RUN apt-get install libtbb-dev -y
#RUN wget https://launchpad.net/ubuntu/+archive/primary/+files/libtbb2_2017~U7-8_amd64.deb
#RUN dpkg -i libtbb2_2017~U7-8_amd64.deb
#RUN wget https://launchpad.net/ubuntu/+archive/primary/+files/libtbb-dev_2017~U7-8_amd64.deb
#RUN dpkg -i libtbb-dev_2017~U7-8_amd64.deb

RUN wget https://sqlite.org/2022/sqlite-autoconf-3380000.tar.gz --no-check-certificate
RUN tar xvzf sqlite-autoconf-3380000.tar.gz
RUN cd sqlite-autoconf-3380000 && env CPPFLAGS='-O2 -DNDEBUG -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_STAT4 -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT -DSQLITE_ENABLE_COLUMN_METADATA -DHAVE_ISNAN -DOMIT_LOOKASIDE -DUSE_URI -DSQLITE_DEFAULT_MEMSTATUS=0 -DSQLITE_DEFAULT_WAL_SYNCHRONOUS -DSQLITE_LIKE_DOESNT_MATCH_BLOBS -DSQLITE_MAX_EXPR_DEPTH=0 -DSQLITE_OMIT_DEPRECATED -DSQLITE_OMIT_PROGRESS_CALLBACK -DSQLITE_OMIT_SHARED_CACHE -DSQLITE_USE_ALLOCA -DENABLE_BYTECODE_VTAB -DENABLE_FTS3_PARENTHESIS -DENABLE_FTS3_TOKENIZER -DENABLE_PREUPDATE_HOOK -DENABLE_SESSION -DENABLE_PREUPDATE_HOOK -DENABLE_UNKNOWN_SQL_FUNCTION -DENABLE_UNLOCK_NOTIFY -DSOUNDEX -DDEFAULT_AUTOVACUUM=0 -DSQLITE_DEFAULT_WORKER_THREADS=8' ./configure --prefix=/usr/ --libdir=/usr/lib/x86_64-linux-gnu/
RUN cd sqlite-autoconf-3380000 && make
RUN cd sqlite-autoconf-3380000 && make install
RUN sqlite3 --version
RUN sqlite3 -cmd "PRAGMA compile_options;"
RUN sqlite3 -cmd "CREATE TABLE countries (id varchar(3), data json);insert into countries (id, data) values(1, json('{\"cell\":\"+491765\", \"home\":\"+498973\"}'));select * from countries;"

RUN cp /etc/apt/sources.list /etc/apt/sources.list~
RUN sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
RUN apt-get update

RUN apt-get build-dep libopenscenegraph-dev -y
RUN apt-get build-dep libosgearth-dev -y
RUN apt-get install libgeos-dev -y

# remove libs since manually installed
RUN apt-get remove qt4-qmake libqt4* qt4-dev-tools libopenscenegraph-dev libopenscenegraph99 openscenegraph openscenegraph-plugin-osgearth osgearth -y 
#libopenthreads-dev libopenthreads14 

# gui/x11 
RUN apt-get install gedit libgl1-mesa-dev libegl1-mesa-drivers libxkbcommon-x11-dev -y

# qt
ENV QT_VERSION_A=5.8
ENV QT_VERSION_B=5.8.0
ENV QT_VERSION_SCRIPT=580
#ENV QT_VERSION_A=5.9
#ENV QT_VERSION_B=5.9.0
#ENV QT_VERSION_SCRIPT=590

#RUN wget https://download.qt.io/archive/qt/${QT_VERSION_A}/${QT_VERSION_B}/qt-opensource-linux-x64-${QT_VERSION_B}.run
RUN wget https://download.qt.io/new_archive/qt/${QT_VERSION_A}/${QT_VERSION_B}/qt-opensource-linux-x64-${QT_VERSION_B}.run
RUN chmod +x qt-opensource-linux-x64-${QT_VERSION_B}.run 
COPY qt-noninteractive.qs /qt-noninteractive.qs
RUN ./qt-opensource-linux-x64-${QT_VERSION_B}.run --script qt-noninteractive.qs  -platform minimal

ENV QT_SELECT=5
ENV QT_QPA_PLATFORMTHEME=gtk3
ENV UBUNTU_MENUPROXY=
#ENV QT_STYLE_OVERRIDE=adwaita
ENV QTDIR=/qt/${QT_VERSION_A}
ENV PATH="${QTDIR}/gcc_64/bin:${PATH}"
ENV QTTOOLDIR="${QTDIR}/gcc_64/bin"
ENV QTLIBDIR="${QTDIR}/gcc_64/"

#osg
#RUN wget https://github.com/openscenegraph/OpenSceneGraph/archive/OpenSceneGraph-3.4.1.zip
#RUN unzip OpenSceneGraph-3.4.1.zip
#RUN mkdir OpenSceneGraph-OpenSceneGraph-3.4.1/build
#RUN cd OpenSceneGraph-OpenSceneGraph-3.4.1/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
#RUN cd OpenSceneGraph-OpenSceneGraph-3.4.1/build && make -j 16
#RUN cd OpenSceneGraph-OpenSceneGraph-3.4.1/build && make install

RUN add-apt-repository ppa:ubuntugis/ppa
RUN apt-get update
#RUN sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
#RUN apt-get update && apt-get --only-upgrade install libgdal-dev  -y
#RUN ls /usr/share/gdal

RUN  wget http://download.osgeo.org/gdal/2.2.0/gdal220.zip
RUN unzip gdal220.zip
RUN cd gdal-2.2.0 && ./configure
RUN cd gdal-2.2.0 && make -j 8 && make install

RUN apt-get install libgif-dev -y

RUN wget https://github.com/openscenegraph/OpenSceneGraph/archive/OpenSceneGraph-3.6.5.zip
RUN unzip OpenSceneGraph-3.6.5.zip
RUN mkdir OpenSceneGraph-OpenSceneGraph-3.6.5/build
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_DISABLE_FIND_PACKAGE_GIFLIB=TRUE --config Release -DGIFLIB_FOUND="" -DCMAKE_CXX_STANDARD=11 ..
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && make -j 16
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && make install

RUN wget https://github.com/openscenegraph/osgQt/archive/Qt4.zip
RUN unzip Qt4.zip
RUN mkdir osgQt-Qt4/build
RUN cd osgQt-Qt4/build && cmake -DCMAKE_INSTALL_PREFIX=/usr --config Release ..
RUN cd osgQt-Qt4/build && make -j 16
RUN cd osgQt-Qt4/build && make install

RUN apt-get install libgeos++-dev -y

RUN apt-get install autoconf automake libtool curl -y

RUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protobuf-cpp-3.19.1.zip
RUN unzip protobuf-cpp-3.19.1.zip
RUN cd protobuf-3.19.1 && ./autogen.sh
RUN cd protobuf-3.19.1 && ./configure
RUN cd protobuf-3.19.1 && make -j 16
#RUN cd protobuf-3.19.1 && make check
RUN cd protobuf-3.19.1 && make install
RUN cd protobuf-3.19.1 && ldconfig # refresh shared library cache.

RUN echo 'if(PROTOBUF_FOUND)' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
RUN echo '    set(Protobuf_FOUND ${PROTOBUF_FOUND})' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
RUN echo '    set(Protobuf_PROTOC_EXECUTABLE ${PROTOBUF_PROTOC_EXECUTABLE})' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
RUN echo '    set(Protobuf_INCLUDE_DIR ${PROTOBUF_INCLUDE_DIR})    ' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
RUN echo '    set(Protobuf_LIBRARIES ${PROTOBUF_LIBRARIES})    ' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
RUN echo 'endif()' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake

RUN wget https://github.com/gwaldron/osgearth/archive/osgearth-3.2.zip
RUN unzip osgearth-3.2.zip
RUN mkdir osgearth-osgearth-3.2/build
RUN cd osgearth-osgearth-3.2/build && cmake -DCMAKE_CXX_FLAGS=-std=c++11 -DOSGEARTH_BUILD_TESTS=OFF -DOSGEARTH_BUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=/usr --config Release ..
RUN cd osgearth-osgearth-3.2/build && make -j 16
RUN cd osgearth-osgearth-3.2/build && make install

#RUN wget https://github.com/gwaldron/osgearth/archive/osgearth-2.10.2.zip
#RUN unzip osgearth-2.10.2.zip
#RUN mkdir osgearth-osgearth-2.10.2/build
#RUN cd osgearth-osgearth-2.10.2/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DOSGEARTH_USE_QT=TRUE -DDESIRED_QT_VERSION=5 --config Release ..
#RUN cd osgearth-osgearth-2.10.2/build && make -j 16
#RUN cd osgearth-osgearth-2.10.2/build && make install

RUN wget https://github.com/ckgt/NemaTode/archive/master.zip
RUN unzip master.zip
RUN mkdir NemaTode-master/build
RUN cd NemaTode-master/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
RUN cd NemaTode-master/build && make -j 16
RUN cd NemaTode-master/build && make install

#RUN apt-get install gdb -y

RUN ldconfig -v /usr/lib64/
RUN updatedb

RUN apt install sudo

RUN echo 'sk ALL=(ALL)  ALL' >> /etc/sudoers
RUN more /etc/sudoers

USER sk
WORKDIR /app/workspace/compass/docker
