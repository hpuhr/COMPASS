FROM debian:10

ARG USER_NAME
ARG USER_ID
ARG USER_GROUP_ID

ARG DEBIAN_FRONTEND=noninteractive

ENV USER_NAME=${USER_NAME} \
    USER_ID=${USER_ID} \
    USER_GROUP_ID=${USER_GROUP_ID}

RUN echo ">>> USER_NAME=${USER_NAME}" \
 && echo ">>> USER_ID=${USER_ID}" \
 && echo ">>> USER_GROUP_ID=${USER_GROUP_ID}"

RUN cp /etc/apt/sources.list /etc/apt/sources.list~ \ 
  && echo 'deb-src http://archive.debian.org/debian buster main' >> /etc/apt/sources.list \
  && apt-get update \
  && apt-get install -y --no-install-recommends openssl apt-utils software-properties-common build-essential gcc g++ wget libssl-dev liblog4cpp5-dev libssl-dev libarchive-dev libeigen3-dev libgdal-dev libkml-dev locate zip unzip qtchooser chrpath libtbb-dev libgeos-dev gedit libgl1-mesa-dev libegl1-mesa-dev libxkbcommon-x11-dev qt5-* libqt5* qtwayland5 libgif-dev libjpeg-dev libgeos++-dev autoconf automake libtool curl libglew-dev libzip-dev libpcap-dev libgeographic-dev python2.7-dev sudo \
  && apt-get build-dep -y libopenscenegraph-dev libosgearth-dev libboost-all-dev \
  && rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
    apt-get remove --purge -y libopenscenegraph-3.4-131 && \
    apt-get autoremove -y && \
    rm -rf /usr/lib/x86_64-linux-gnu/osgPlugins-3.4.1  
  
RUN groupadd -r someusers --gid=${USER_GROUP_ID} 
RUN useradd -r -p "$(openssl passwd -1 ${USER_NAME})" -g someusers -G sudo --uid=${USER_ID} --create-home --shell /bin/bash ${USER_NAME} 

ENV CXXFLAGS="-march=x86-64 -mtune=generic"
ENV CFLAGS="-march=x86-64 -mtune=generic"

#install cmake

ENV CMAKE_VERSION=3.28
ENV CMAKE_BUILD=1

RUN wget https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.${CMAKE_BUILD}.tar.gz
RUN tar xzvf cmake-${CMAKE_VERSION}.${CMAKE_BUILD}.tar.gz
RUN cd cmake-${CMAKE_VERSION}.${CMAKE_BUILD}/ && ./bootstrap
RUN cd cmake-${CMAKE_VERSION}.${CMAKE_BUILD}/ && make -j$(nproc)
RUN cd cmake-${CMAKE_VERSION}.${CMAKE_BUILD}/ && make install
RUN cmake --version

#install boost

RUN wget -O boost_1_83_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.83.0/boost_1_83_0.tar.gz/download --no-check-certificate
RUN tar xzvf boost_1_83_0.tar.gz
RUN cd boost_1_83_0/ && ./bootstrap.sh --prefix=/usr/local/
RUN cd boost_1_83_0/ && ./b2 headers cxxflags="-std=c++17 -march=x86-64 -mtune=generic"
RUN cd boost_1_83_0/ && ./b2 install cxxflags="-std=c++17 -march=x86-64 -mtune=generic"

RUN wget https://github.com/openscenegraph/OpenSceneGraph/archive/OpenSceneGraph-3.6.5.zip
RUN unzip OpenSceneGraph-3.6.5.zip
RUN mkdir OpenSceneGraph-OpenSceneGraph-3.6.5/build
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && make -j$(nproc)
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && make install

RUN rm -rf OpenSceneGraph-OpenSceneGraph-3.6.5/build/lib

RUN wget https://github.com/openscenegraph/osgQt/archive/Qt4.zip
RUN unzip Qt4.zip
RUN mkdir osgQt-Qt4/build
RUN cd osgQt-Qt4/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
RUN cd osgQt-Qt4/build && make -j$(nproc)
RUN cd osgQt-Qt4/build && make install

RUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protobuf-cpp-3.19.1.zip
RUN unzip protobuf-cpp-3.19.1.zip
RUN cd protobuf-3.19.1 && ./autogen.sh
RUN cd protobuf-3.19.1 && ./configure
RUN cd protobuf-3.19.1 && make -j$(nproc)
#RUN cd protobuf-3.19.1 && make check
RUN cd protobuf-3.19.1 && make install
RUN cd protobuf-3.19.1 && ldconfig # refresh shared library cache.

RUN wget https://github.com/gwaldron/osgearth/archive/osgearth-3.2.zip
RUN unzip osgearth-3.2.zip
RUN mkdir osgearth-osgearth-3.2/build
RUN cd osgearth-osgearth-3.2/build && cmake -DOSGEARTH_BUILD_TESTS=OFF -DOSGEARTH_BUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr -DOPENTHREADS_INCLUDE_DIR=/usr/include   -DOPENTHREADS_LIBRARY=/usr/lib/libOpenThreads.so \-DCMAKE_BUILD_TYPE=Release ..
RUN cd osgearth-osgearth-3.2/build && make -j$(nproc)
RUN cd osgearth-osgearth-3.2/build && make install

RUN wget https://github.com/hpuhr/NemaTode/archive/refs/heads/master.zip
RUN unzip master.zip
RUN mkdir NemaTode-master/build
RUN cd NemaTode-master/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
RUN cd NemaTode-master/build && make -j$(nproc)
RUN cd NemaTode-master/build && make install

RUN wget https://github.com/duckdb/duckdb/releases/download/v1.3.1/libduckdb-linux-amd64.zip
RUN mkdir libduckdb-linux-amd64
RUN unzip libduckdb-linux-amd64.zip -d libduckdb-linux-amd64
RUN cd libduckdb-linux-amd64 && cp *.h /usr/include
RUN cd libduckdb-linux-amd64 && cp lib* /usr/lib

RUN ldconfig -v /usr/lib64/ /usr/local/
RUN updatedb

RUN echo "${USER_NAME} ALL=(ALL)  ALL" >> /etc/sudoers
RUN more /etc/sudoers

USER ${USER_NAME} 
WORKDIR /app/workspace/compass/docker
