FROM debian:stretch

ARG USER_NAME
ARG USER_ID
ARG USER_GROUP_ID

ARG DEBIAN_FRONTEND=noninteractive

ENV USER_NAME=${USER_NAME} \
    USER_ID=${USER_ID} \
    USER_GROUP_ID=${USER_GROUP_ID}

RUN echo ">>> USER_NAME=${USER_NAME}" \
 && echo ">>> USER_ID=${USER_ID}" \
 && echo ">>> USER_GROUP_ID=${USER_GROUP_ID}"
    
RUN sed -i -e 's/deb.debian.org/archive.debian.org/g' \
           -e 's|security.debian.org|archive.debian.org/|g' \
           -e '/stretch-updates/d' /etc/apt/sources.list

RUN cp /etc/apt/sources.list /etc/apt/sources.list~ \ 
  && echo 'deb-src http://archive.debian.org/debian stretch main' >> /etc/apt/sources.list \
  && apt-get update \
  && apt-get install -y --no-install-recommends openssl apt-utils software-properties-common build-essential gcc g++ cmake wget liblog4cpp5-dev libssl-dev libarchive-dev libmysql++-dev libeigen3-dev libgdal-dev libkml-dev locate zip unzip qtchooser chrpath libtbb-dev libgeos-dev build-essential libfontconfig1-dev libx11-dev libxcb1-dev libxkbcommon-dev libglu1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libxrender-dev libxcb-xinerama0-dev libxcb-image0-dev libwayland-dev gedit libgl1-mesa-dev libegl1-mesa-drivers libxkbcommon-x11-dev libgif-dev libjpeg-dev libgeos++-dev autoconf automake libtool curl libpcap-dev libgeographic-dev python2.7-dev sudo \
  && apt-get build-dep -y libopenscenegraph-dev libosgearth-dev libboost-all-dev \
  && rm -rf /var/lib/apt/lists/*

# remove libs since manually installed
RUN apt-get remove qt4-qmake libqt4* qt4-dev-tools libopenscenegraph-dev openscenegraph -y  
  
RUN groupadd -r someusers --gid=${USER_GROUP_ID} 
RUN useradd -r -p "$(openssl passwd -1 ${USER_NAME})" -g someusers -G sudo --uid=${USER_ID} --create-home --shell /bin/bash ${USER_NAME} 

ENV CXXFLAGS="-march=x86-64 -mtune=generic"
ENV CFLAGS="-march=x86-64 -mtune=generic"

#install boost
RUN wget -O boost_1_74_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.74.0/boost_1_74_0.tar.gz/download --no-check-certificate
RUN tar xzvf boost_1_74_0.tar.gz
RUN cd boost_1_74_0/ && ./bootstrap.sh --prefix=/usr/local/
RUN cd boost_1_74_0/ && ./b2 headers cxxflags="-march=x86-64 -mtune=generic -std=c++11"
RUN cd boost_1_74_0/ && ./b2 install cxxflags="-march=x86-64 -mtune=generic -std=c++11"

# qt

# 2) Download & extract Qt 5.12.7 sources
WORKDIR /tmp
RUN wget https://download.qt.io/archive/qt/5.12/5.12.7/single/qt-everywhere-src-5.12.7.tar.xz \
 && tar xf qt-everywhere-src-5.12.7.tar.xz

# 3) Configure, build & install Qt (core + all modules, including qtwayland)
WORKDIR /tmp/qt-everywhere-src-5.12.7
RUN ./configure \
       -prefix /opt/qt5.12.7 \
       -opensource -confirm-license \
       -nomake tests -nomake examples \
    && make -j"$(nproc)" \
    && make install

# 4) Set up environment so CMake & runtime find it by default
ENV PATH=/opt/qt5.12.7/bin:$PATH \
    CMAKE_PREFIX_PATH=/opt/qt5.12.7${CMAKE_PREFIX_PATH:+":$CMAKE_PREFIX_PATH"} \
    LD_LIBRARY_PATH=/opt/qt5.12.7/lib${LD_LIBRARY_PATH:+":$LD_LIBRARY_PATH"}

# reset WORKDIR
WORKDIR /

RUN wget https://github.com/openscenegraph/OpenSceneGraph/archive/OpenSceneGraph-3.6.5.zip
RUN unzip OpenSceneGraph-3.6.5.zip
RUN mkdir OpenSceneGraph-OpenSceneGraph-3.6.5/build
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_DISABLE_FIND_PACKAGE_GIFLIB=TRUE --config Release -DGIFLIB_FOUND="" -DCMAKE_CXX_STANDARD=11 ..
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && make -j $(nproc)
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && make install

RUN wget https://github.com/openscenegraph/osgQt/archive/Qt4.zip
RUN unzip Qt4.zip
RUN mkdir osgQt-Qt4/build
RUN cd osgQt-Qt4/build && cmake -DCMAKE_INSTALL_PREFIX=/usr --config Release ..
RUN cd osgQt-Qt4/build && make -j $(nproc)
RUN cd osgQt-Qt4/build && make install

RUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protobuf-cpp-3.19.1.zip
RUN unzip protobuf-cpp-3.19.1.zip
RUN cd protobuf-3.19.1 && ./autogen.sh
RUN cd protobuf-3.19.1 && ./configure
RUN cd protobuf-3.19.1 && make -j $(nproc)
#RUN cd protobuf-3.19.1 && make check
RUN cd protobuf-3.19.1 && make install
RUN cd protobuf-3.19.1 && ldconfig # refresh shared library cache.

RUN echo 'if(PROTOBUF_FOUND)' >> /usr/share/cmake-3.7/Modules/FindProtobuf.cmake
RUN echo '    set(Protobuf_FOUND ${PROTOBUF_FOUND})' >> /usr/share/cmake-3.7/Modules/FindProtobuf.cmake
RUN echo '    set(Protobuf_PROTOC_EXECUTABLE ${PROTOBUF_PROTOC_EXECUTABLE})' >> /usr/share/cmake-3.7/Modules/FindProtobuf.cmake
RUN echo '    set(Protobuf_INCLUDE_DIR ${PROTOBUF_INCLUDE_DIR})    ' >> /usr/share/cmake-3.7/Modules/FindProtobuf.cmake
RUN echo '    set(Protobuf_LIBRARIES ${PROTOBUF_LIBRARIES})    ' >> /usr/share/cmake-3.7/Modules/FindProtobuf.cmake
RUN echo 'endif()' >> /usr/share/cmake-3.7/Modules/FindProtobuf.cmake

RUN wget https://github.com/gwaldron/osgearth/archive/osgearth-3.2.zip
RUN unzip osgearth-3.2.zip
RUN mkdir osgearth-osgearth-3.2/build
RUN cd osgearth-osgearth-3.2/build && cmake -DCMAKE_CXX_FLAGS=-std=c++11 -DOSGEARTH_BUILD_TESTS=OFF -DOSGEARTH_BUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=/usr --config Release ..
RUN cd osgearth-osgearth-3.2/build && make -j $(nproc)
RUN cd osgearth-osgearth-3.2/build && make install

RUN wget https://github.com/hpuhr/NemaTode/archive/refs/heads/master.zip
RUN unzip master.zip
RUN mkdir NemaTode-master/build
RUN cd NemaTode-master/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
RUN cd NemaTode-master/build && make -j $(nproc)
RUN cd NemaTode-master/build && make install

RUN mkdir jasper
RUN cd jasper && wget https://debian-security.sipwise.com/debian-security/pool/main/j/jasper/libjasper1_1.900.1-debian1-2.4+deb8u3_amd64.deb
RUN cd jasper && wget https://debian-security.sipwise.com/debian-security/pool/main/j/jasper/libjasper-dev_1.900.1-debian1-2.4+deb8u3_amd64.deb
RUN cd jasper && dpkg -i *.deb

RUN wget https://github.com/duckdb/duckdb/releases/download/v1.2.0/libduckdb-linux-amd64.zip
RUN mkdir libduckdb-linux-amd64
RUN unzip libduckdb-linux-amd64.zip -d libduckdb-linux-amd64
RUN cd libduckdb-linux-amd64 && cp *.h /usr/include
RUN cd libduckdb-linux-amd64 && cp lib* /usr/lib

RUN ldconfig -v /usr/lib64/ /usr/local/
RUN updatedb

RUN echo "${USER_NAME} ALL=(ALL)  ALL" >> /etc/sudoers
RUN more /etc/sudoers

USER ${USER_NAME}
WORKDIR /app/workspace/compass/docker
